INT_MIN is a macro present in #include<climits> which contains the maximum negative value
multiplication of 2 prime numbers give a unique result, which cannot be formed by multiplication of other numbers

============ trie data structure =============
you would have noticed we are doing:
int index = arr[i] - 'a'
its because 'a' in ascii has value 48, so if we want to assign an index to it i.e. 0 while storing it in array, we need to subtract 48 from it.
as we cannot have an array like arr['a'] as the index should be a number, we are doing this. If you dont want to do this, then use a map
============ tree data structure =============
-> depth of node x = length of path from root to x, or no. of edges in path from root to x
-> height of x = no. of edges in longest path from that node x to a leaf
-> balanced binary tree = difference between height of left sub tree and right sub tree is not more than 'k' (mostly 1)
-> another alternative for storing balanced binary tree other than dynamic memory is storing it in array:
   so, how do you know, who is the child of shom. by this simple formula:
   left-child = 2i +1
-> Level order traversal of a tree is breadth-first traversal for the tree   
=================== strings =====================
If the question is, given a string of length 'n', find the number of DISTINCT substring possible, then the formula is (n*(n-1))/2
For all the possible substring, the formula is n*(n+1)/2
For searching for a character in string
example:
string str = "abcd"
char c = 'a'
if (str.find(c) != string:npos)
	cout<<"String has been found"<<endl;
================== permutation and combination =====================
given n items, k items have to be selected where sequence or order does not matter, no replacement, then the formula is:
((n+k-1)/k).
eg: n=4, k=3
=================== vector =============
initialize a vector from a set:
set<int>s= {1,2,3};
vector<int>v(s.begin(), s.end());

Initializing a vector during declaration:
vector<int>ways(5, 0); //creates a vector of size 5 and initializes all elements to Zero

whats the difference between v.at(i) vs v[i] when accessing a value inside a vector:
-> in case of out of bound reach, at() has exception handling capability, whereas [] doesnt

-> s.find(3) works well for set, map, but not in case of vector. I messed it up in an interview with CME group
syntax is:
vector<int>::iterator it;
it = find(v.begin(), v.end(), 3);
if (it != v.end())
	cout<<"element found";
=================== map ================
MAP by default stores elements in ascending order 
=============== heap ==================
-> a heap is a complete binary tree 
-> heap is of 2 types: min heap, max heap
-> application : 
-> While creating heap, we first fill the left child then right. 
============ priority_queue ======================
-> priority_queue is a special queue that stores elements in decreasing order. all insert, and delete will lead to realignment of elements such that order is maintained
by default priority_queue is descending order, to use priority_queue as ascending order, certain changes are required in logic.
Please go through the sample code
================ set ======================
in set each element has to be unique, and the content cannot be modified once it has entered the set.
by default elements in set are stored in ascending order.
syntax: set<int>s1;
To store the elements in descending order:
set<int, greater<int>>s2;
to insert: s1.insert(10);
To remove: s2.erase(50);
To search: if (data.find(nums[i]) != data.end())
to erase after searching: s1.erase(s1.find(50))
================ deque ====================
deque is a double ended queue, where insertion and deletion happens at both the ends.
Syntax is as follows:
deque <int> gquiz;
gquiz.push_back(10);
gquiz.push_front(20);
gquiz.push_back(30);
gquiz.push_front(15);
gquiz.pop_front();
gquiz.pop_back();
============= list ======================
if I need to use linked list in my code, then use list<int> instead of declaring the structure, doing memory allocation and all that 
ready made utility is available in c++
list<int>l1 is a double linked list insertion deletion happens at both ends 
functions available are:
push_back
push_front
pop_front
pop_back
reverse
sort
NOTE: forward_list in c++ is single linked list 
============= unordered_map =============
unordered_map is internally implemented using hash map. hence insertion deletion is O(1). Worst case its O(N2)
unordered_map vs map : 
map (like set) is an ordered sequence of unique keys whereas in unordered_map key can be stored in any order, so unordered. 
The map is implemented as a balanced tree structure that is why it is possible to maintain order between the elements 
(by specific tree traversal). The time complexity of map operations is O(log n) while for unordered_map, it is O(1) on average. 	
while storing elements in unordered_map, its stored in the stack fashion and not queue, meaning every new element sits at the top
============ multimap =====================
in case of map, key value has to be unique, so no 2 entries can have same key value. if we require to save entries with same key value,
then we should use multimap 
=======================================
https://www.interviewbit.com/tutorial/breadth-first-search/
https://www.interviewbit.com/tutorial/depth-first-search/
=======================================
sliding window algorithm = find maximum subarray of size k in array of size n where k<n. instead of linearly checking the value of each subarray, 
use the sliding window approach, where whenever we add a new array item to the sum, we remove the last array item from th sum 

-> remove nth node from the end of the linked list. To solve this problem we created a dummy node at the beginning of the LL.
this seems to be a very common approach. Do refer to this one on leetcode 

-> Given two strings str1 and str2 and below operations that can be performed on str1. Find minimum number of edits (operations) required to convert ‘str1’ into ‘str2’ = Levenshtein distance. this is basically converting str1 to str2. test case could be dictionary on cell phone, where ont typing
 the software checks how closer you are to a particular word 

Minimum Spanning Tree(MST):
MST is a subset of a tree, where we select all the Nodes, but the number of edges to be selected is (V-1)

How to select Minimum Spanning Tree:
Prim's Algorithm:
1) Select edge with minimum cost 
2) Select next minimum edge connected to the above already selected edge 
3) Prim's algorithm does not work for disconnected graphs

Kruskal's Algorithm:
1) Select minimum cost edge
2) Select another minimum cost edge. If the edge creates a loop, then select another edge 
3) Keep on selecting edges till the time V-1 edges are selected 
4) To improve the efficiency of kruskal's algo, use min heap 
5) It may work for disconnected graphs 









